# -*- coding: utf-8 -*-
"""ai-model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BMPgo1FIVvYL92vXkorcj2NrgV_g4pq-
"""

# Load your data
df = pd.read_csv('user_persona_data.csv')

# Initialize encoders BEFORE transforming the data
occupation_encoder = LabelEncoder()
education_encoder = LabelEncoder()
label_encoder = LabelEncoder()

# Fit encoders on original string data
df['Occupation'] = occupation_encoder.fit_transform(df['Occupation'])
df['Education'] = education_encoder.fit_transform(df['Education'])
df['Persona Label'] = label_encoder.fit_transform(df['Persona Label'])

# Features and labels
X = df[['Age', 'Occupation', 'Experience', 'Education']]
y = df['Persona Label']

# Split data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Scale features
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Train classifier
clf = RandomForestClassifier()
clf.fit(X_train, y_train)

# Evaluate
y_pred = clf.predict(X_test)
print(classification_report(y_test, y_pred))

# Save all components properly
joblib.dump(clf, 'persona_model.pkl')
joblib.dump(scaler, 'scaler.pkl')
joblib.dump(occupation_encoder, 'occupation_encoder.pkl')
joblib.dump(education_encoder, 'education_encoder.pkl')
joblib.dump(label_encoder, 'label_encoder.pkl')

import joblib

# Load saved components
model = joblib.load('persona_model.pkl')
scaler = joblib.load('scaler.pkl')
occupation_encoder = joblib.load('occupation_encoder.pkl')
education_encoder = joblib.load('education_encoder.pkl')
label_encoder = joblib.load('label_encoder.pkl')

# ===== MANUAL INPUT HERE =====
age = 24
occupation = 'Student'
experience = 3
education = 'Bachelor'
# =============================

# Transform categorical values
occ_encoded = occupation_encoder.transform([occupation])[0]
edu_encoded = education_encoder.transform([education])[0]

# Prepare and scale the input
X_input = scaler.transform([[age, occ_encoded, experience, edu_encoded]])

# Predict persona
pred = model.predict(X_input)[0]
persona_label = label_encoder.inverse_transform([pred])[0]

print(f"Predicted persona: {persona_label}")

